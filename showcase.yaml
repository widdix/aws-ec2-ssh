---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS EC2 SSH access with IAM showcase'
Parameters:
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: 'The VPC the EC2 instance is launched into.'
  Subnet:
    Type: 'AWS::EC2::Subnet::Id'
    Description: 'The subnet the EC2 instance is launched into.'
  AssumeRole:
    Type: 'String'
    Description: 'The role to assume to get the IAM users to provision into the instance'
    Default: ''
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-cacbbea5'
    'eu-west-1':
      AMI: 'ami-d41d58a7'
    'ap-northeast-2':
      AMI: 'ami-a04297ce'
    'ap-northeast-1':
      AMI: 'ami-1a15c77b'
    'sa-east-1':
      AMI: 'ami-b777e4db'
    'ap-southeast-1':
      AMI: 'ami-7243e611'
    'ap-southeast-2':
      AMI: 'ami-55d4e436'
    'eu-central-1':
      AMI: 'ami-0044b96f'
    'us-east-1':
      AMI: 'ami-c481fad3'
    'us-east-2':
      AMI: 'ami-71ca9114'
    'us-west-1':
      AMI: 'ami-de347abe'
    'us-west-2':
      AMI: 'ami-b04e92d0'
Conditions:
  UseCrossAccountIAM: !Not [!Equals [!Ref AssumeRole, '']]
  UseLocalIAM: !Equals [!Ref AssumeRole, '']
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ssh
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref Role
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: /
  CrossAccountRolePolicy:
    Type: 'AWS::IAM::Policy'
    Condition: UseCrossAccountIAM
    Properties:
      PolicyName: crossaccountiam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Resource: !Ref AssumeRole
      Roles:
        - !Ref Role
  LocalRolePolicy:
    Type: 'AWS::IAM::Policy'
    Condition: UseLocalIAM
    Properties:
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: 'iam:ListUsers'
          Resource: '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
      Roles:
        - !Ref Role
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            '/opt/authorized_keys_command.sh':
              !Sub: |
                #!/bin/bash -e
                if [ -z "$1" ]; then
                  exit 1
                fi

                # Assume a role before contacting AWS IAM to get users and keys.
                # This can be used if you define your users in one AWS account, while the EC2
                # instance you use this script runs in another.
                AssumeRole="${AssumeRole}"

                if [[ ! -z "${!AssumeRole}" ]]
                then
                  STSCredentials=$(aws sts assume-role \
                    --role-arn "${!AssumeRole}" \
                    --role-session-name something \
                    --query '[Credentials.SessionToken,Credentials.AccessKeyId,Credentials.SecretAccessKey]' \
                    --output text)

                  AWS_ACCESS_KEY_ID=$(echo "${!STSCredentials}" | awk '{print $2}')
                  AWS_SECRET_ACCESS_KEY=$(echo "${!STSCredentials}" | awk '{print $3}')
                  AWS_SESSION_TOKEN=$(echo "${!STSCredentials}" | awk '{print $1}')
                  AWS_SECURITY_TOKEN=$(echo "${!STSCredentials}" | awk '{print $1}')
                  export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN
                fi

                SaveUserName="$1"
                SaveUserName=${!SaveUserName//"+"/".plus."}
                SaveUserName=${!SaveUserName//"="/".equal."}
                SaveUserName=${!SaveUserName//","/".comma."}
                SaveUserName=${!SaveUserName//"@"/".at."}

                aws iam list-ssh-public-keys --user-name "$SaveUserName" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read KeyId; do
                  aws iam get-ssh-public-key --user-name "$SaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            '/opt/import_users.sh':
              !Sub: |
                #!/bin/bash

                # Assume a role before contacting AWS IAM to get users and keys.
                # This can be used if you define your users in one AWS account, while the EC2
                # instance you use this script runs in another.
                AssumeRole="${AssumeRole}"

                if [[ ! -z "${!AssumeRole}" ]]
                then
                  STSCredentials=$(aws sts assume-role \
                    --role-arn "${!AssumeRole}" \
                    --role-session-name something \
                    --query '[Credentials.SessionToken,Credentials.AccessKeyId,Credentials.SecretAccessKey]' \
                    --output text)

                  AWS_ACCESS_KEY_ID=$(echo "${!STSCredentials}" | awk '{print $2}')
                  AWS_SECRET_ACCESS_KEY=$(echo "${!STSCredentials}" | awk '{print $3}')
                  AWS_SESSION_TOKEN=$(echo "${!STSCredentials}" | awk '{print $1}')
                  AWS_SECURITY_TOKEN=$(echo "${!STSCredentials}" | awk '{print $1}')
                  export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN
                fi

                # Specify an IAM group for users who should be given sudo privileges, or leave
                # empty to not change sudo access, or give it the value '##ALL##' to have all
                # users be given sudo rights.
                SudoersGroup=""
                [[ -z "${!SudoersGroup}" ]] || [[ "${!SudoersGroup}" == "##ALL##" ]] || Sudoers=$(
                  aws iam get-group --group-name "${!SudoersGroup}" --query "Users[].[UserName]" --output text
                );

                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do
                  SaveUserName="$User"
                  SaveUserName=${!SaveUserName//"+"/".plus."}
                  SaveUserName=${!SaveUserName//"="/".equal."}
                  SaveUserName=${!SaveUserName//","/".comma."}
                  SaveUserName=${!SaveUserName//"@"/".at."}
                  if ! grep "^$SaveUserName:" /etc/passwd > /dev/null; then
                    /usr/sbin/useradd --create-home --shell /bin/bash "$SaveUserName" 
                  fi

                  if [[ ! -z "${!SudoersGroup}" ]]; then
                    # sudo will read each file in /etc/sudoers.d, skipping file names that end
                    # in ‘~’ or contain a ‘.’ character to avoid causing problems with package
                    # manager or editor temporary/backup files.
                    SaveUserFileName=$(echo "$SaveUserName" | tr "." " ")
                    SaveUserSudoFilePath="/etc/sudoers.d/$SaveUserFileName"
                    if [[ "${!SudoersGroup}" == "##ALL##" ]] || echo "$Sudoers" | grep "^$User\$" > /dev/null; then
                      echo "$SaveUserName ALL=(ALL) NOPASSWD:ALL" > "$SaveUserSudoFilePath"
                    else
                      [[ ! -f "$SaveUserSudoFilePath" ]] || rm "$SaveUserSudoFilePath"
                    fi
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            '/etc/cron.d/import_users':
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName}  --region=${AWS::Region}  --resource=Instance
                runas=root
          commands:
            a_configure_sshd_command:
              command: "sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config"
            b_configure_sshd_commanduser:
              command: "sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config"
            c_import_users:
              command: './import_users.sh'
              cwd: '/opt'
          services:
            sysvinit:
              'cfn-hup':
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                - 'a_configure_sshd_command'
                - 'b_configure_sshd_commanduser'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: 't2.micro'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
          /opt/aws/bin/cfn-signal --exit-code=$? --stack=${AWS::StackName} --region=${AWS::Region}  --resource=Instance
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        SubnetId: !Ref Subnet
        DeviceIndex: 0
        GroupSet:
        - !Ref SecurityGroup
      Tags:
      - Key: Name
        Value: 'AWS EC2 SSH access with IAM showcase'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
Outputs:
  PublicName:
    Description: 'The public name of the EC2 instance.'
    Value: !GetAtt 'Instance.PublicDnsName'
