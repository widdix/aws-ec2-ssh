---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS EC2 SSH access with IAM showcase
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC the EC2 instance is launched into

  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet the EC2 instance is launched into

  AssumeRole:
    Type: String
    Description: Optional IAM role ARN to assume to get the IAM users from another account
    Default: ''

  KeyName:
    Description: Optional key pair of the ec2-user to establish a SSH connection to the EC2 instance when things go wrong
    Type: String
    Default: ''

  OS:
    Description: Operating system
    Type: String
    Default: AmazonLinux
    AllowedValues:
    - AmazonLinux
    - Ubuntu

  EcsSshVersion:
    Type: String
    Default: master
    Description: The github version of the ec2 ssh config scripts to use

Mappings:
  OSMap:
    AmazonLinux: {RegionMap: RegionMapAmazonLinux}
    Ubuntu: {RegionMap: RegionMapUbuntu}

  RegionMapAmazonLinux:
    'ap-south-1':
      AMI: 'ami-2ed19c41'
    'eu-west-3':
      AMI: 'ami-c8a017b5'
    'eu-west-2':
      AMI: 'ami-e3051987'
    'eu-west-1':
      AMI: 'ami-760aaa0f'
    'ap-northeast-2':
      AMI: 'ami-fc862292'
    'ap-northeast-1':
      AMI: 'ami-2803ac4e'
    'sa-east-1':
      AMI: 'ami-1678037a'
    'ca-central-1':
      AMI: 'ami-ef3b838b'
    'ap-southeast-1':
      AMI: 'ami-dd7935be'
    'ap-southeast-2':
      AMI: 'ami-1a668878'
    'eu-central-1':
      AMI: 'ami-e28d098d'
    'us-east-1':
      AMI: 'ami-6057e21a'
    'us-east-2':
      AMI: 'ami-aa1b34cf'
    'us-west-1':
      AMI: 'ami-1a033c7a'
    'us-west-2':
      AMI: 'ami-32d8124a'
  RegionMapUbuntu:
    'ap-south-1':
      AMI: 'ami-84dc94eb'
    'eu-west-3':
      AMI: 'ami-794bfc04'
    'eu-west-2':
      AMI: 'ami-22415846'
    'eu-west-1':
      AMI: 'ami-63b0341a'
    'ap-northeast-2':
      AMI: 'ami-5027813e'
    'ap-northeast-1':
      AMI: 'ami-42ca4724'
    'sa-east-1':
      AMI: 'ami-8181c7ed'
    'ca-central-1':
      AMI: 'ami-b0c67cd4'
    'ap-southeast-1':
      AMI: 'ami-29aece55'
    'ap-southeast-2':
      AMI: 'ami-9b8076f9'
    'eu-central-1':
      AMI: 'ami-13b8337c'
    'us-east-1':
      AMI: 'ami-3dec9947'
    'us-east-2':
      AMI: 'ami-597d553c'
    'us-west-1':
      AMI: 'ami-1a17137a'
    'us-west-2':
      AMI: 'ami-a2e544da'
Conditions:
  UseCrossAccountIAM: !Not [!Equals [!Ref AssumeRole, '']]
  UseLocalIAM: !Equals [!Ref AssumeRole, '']
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ssh
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref Role

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /

  CrossAccountRolePolicy:
    Type: AWS::IAM::Policy
    Condition: UseCrossAccountIAM
    Properties:
      PolicyName: crossaccountiam
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Resource: !Ref AssumeRole
      Roles:
        - !Ref Role

  LocalRolePolicy:
    Type: AWS::IAM::Policy
    Condition: UseLocalIAM
    Properties:
      PolicyName: iam
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - iam:ListUsers
          - iam:GetGroup
          Resource: '*'
        - Effect: Allow
          Action:
          - iam:ListSSHPublicKeys
          - iam:GetSSHPublicKey
          Resource: !Sub arn:aws:iam::${AWS::AccountId}:user/*
        - Effect: Allow
          Action: ec2:DescribeTags
          Resource: '*'
      Roles:
        - !Ref Role

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [!FindInMap [OSMap, !Ref OS, RegionMap], !Ref 'AWS::Region', AMI]
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: t2.micro
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      UserData:
        Fn::Base64: !Sub |
          #cloud-config

          packages:
            # Install packages needed to install the cloudformation bootstrap from source
            # (doing this to be more cross platform compatible)
            - python-setuptools
            - curl
            - tar

          runcmd:
            # Install cfn tools
            - easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

            # Run cfn-init which will execute the metadata
            - /usr/local/bin/cfn-init --verbose --stack="${AWS::StackName}" --region="${AWS::Region}" --resource=Instance

            # Signal success/failure to the cloudformation stack
            - /usr/local/bin/cfn-signal --exit-code $? --stack="${AWS::StackName}" --region="${AWS::Region}" --resource=Instance

      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        SubnetId: !Ref Subnet
        DeviceIndex: 0
        GroupSet:
        - !Ref SecurityGroup

      Tags:
      - Key: Name
        Value: AWS EC2 SSH access with IAM showcase

    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            # Pull down the install script directly from gihub
            /opt/install.sh:
              mode: '000755'
              owner: root
              group: root
              source: !Sub https://raw.githubusercontent.com/ebmeierj/aws-ec2-ssh/${EcsSshVersion}/install.sh

          commands:
            # Run the install script
            01_install_ec2_ssh:
              command: !Sub EC2SSH_GITHUB_VERSION=${EcsSshVersion} ./install.sh -a "${AssumeRole}"
              cwd: /opt

    # This creation policy tells cloudformation to wait for a signal (sent in the userdata portion of the config) before
    # considering the resource creation to be complete. The resource and stack creation will fail if a signal is not received
    # by the timeout.
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

Outputs:
  PublicName:
    Description: The public name of the EC2 instance
    Value: !GetAtt Instance.PublicDnsName
