---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS EC2 SSH access with IAM showcase'
Parameters:
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: 'The VPC the EC2 instance is launched into.'
  Subnet:
    Type: 'AWS::EC2::Subnet::Id'
    Description: 'The subnet the EC2 instance is launched into.'
  AssumeRole:
    Type: 'String'
    Description: 'Optional IAM role ARN to assume to get the IAM users from another account'
    Default: ''
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-9fc7b0f0'
    'eu-west-2':
      AMI: 'ami-bfe0eadb'
    'eu-west-1':
      AMI: 'ami-c51e3eb6'
    'ap-northeast-2':
      AMI: 'ami-94bb6dfa'
    'ap-northeast-1':
      AMI: 'ami-9f0c67f8'
    'sa-east-1':
      AMI: 'ami-bb40d8d7'
    'ca-central-1':
      AMI: 'ami-eb20928f'
    'ap-southeast-1':
      AMI: 'ami-4dd6782e'
    'ap-southeast-2':
      AMI: 'ami-28cff44b'
    'eu-central-1':
      AMI: 'ami-211ada4e'
    'us-east-1':
      AMI: 'ami-9be6f38c'
    'us-east-2':
      AMI: 'ami-38cd975d'
    'us-west-1':
      AMI: 'ami-b73d6cd7'
    'us-west-2':
      AMI: 'ami-1e299d7e'
Conditions:
  UseCrossAccountIAM: !Not [!Equals [!Ref AssumeRole, '']]
  UseLocalIAM: !Equals [!Ref AssumeRole, '']
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ssh
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref Role
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Path: /
  CrossAccountRolePolicy:
    Type: 'AWS::IAM::Policy'
    Condition: UseCrossAccountIAM
    Properties:
      PolicyName: crossaccountiam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Resource: !Ref AssumeRole
      Roles:
        - !Ref Role
  LocalRolePolicy:
    Type: 'AWS::IAM::Policy'
    Condition: UseLocalIAM
    Properties:
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: 
          - 'iam:ListUsers'
          - 'iam:GetGroup'
          Resource: '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
      Roles:
        - !Ref Role
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              git: []
          files:
            '/opt/install.sh':
              content: !Sub |
                #!/bin/bash -e

                tmpdir=$(mktemp -d)

                cd "$tmpdir"

                git clone https://github.com/widdix/aws-ec2-ssh.git

                cd "$tmpdir/aws-ec2-ssh"

                cp authorized_keys_command.sh /opt/authorized_keys_command.sh
                cp import_users.sh /opt/import_users.sh

                # To control which users are imported/synced, uncomment the line below
                # changing GROUPNAMES to a comma seperated list of IAM groups you want to sync.
                # You can specify 1 or more groups, comma seperated, without spaces.
                # If you leave it blank, all IAM users will be synced.
                #sudo sed -i 's/IAM_AUTHORIZED_GROUPS=""/IAM_AUTHORIZED_GROUPS="GROUPNAMES"/' /opt/import_users.sh

                # To control which users are given sudo privileges, uncomment the line below
                # changing GROUPNAME to either the name of the IAM group for sudo users, or
                # to ##ALL## to give all users sudo access. If you leave it blank, no users will
                # be given sudo access.
                #sudo sed -i 's/SUDOERSGROUP=""/SUDOERSGROUP="GROUPNAME"/' /opt/import_users.sh

                # To control which local groups a user will get, uncomment the line belong
                # changing GROUPNAMES to a comma seperated list of local UNIX groups.
                # If you live it blank, this setting will be ignored
                #sudo sed -i 's/LOCAL_GROUPS=""/LOCAL_GROUPS="GROUPNAMES"/' /opt/import_users.sh

                # If your IAM users are in another AWS account, put the AssumeRole ARN here.
                # replace the word ASSUMEROLEARN with the full arn. eg 'arn:aws:iam::$accountid:role/$role'
                # See docs/multiawsaccount.md on how to make this work
                sudo sed -i 's/ASSUMEROLE=""/ASSUMEROLE="${AssumeRole}"/' /opt/import_users.sh
                sudo sed -i 's/ASSUMEROLE=""/ASSUMEROLE="${AssumeRole}"/' /opt/authorized_keys_command.sh

                sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config
                sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config

                echo "*/10 * * * * root /opt/import_users.sh" > /etc/cron.d/import_users
                chmod 0644 /etc/cron.d/import_users

                /opt/import_users.sh

                service sshd restart
              mode: '000755'
              owner: root
              group: root
          commands:
            a_install:
              command: './install.sh'
              cwd: '/opt'
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: 't2.micro'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
          /opt/aws/bin/cfn-signal --exit-code=$? --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        SubnetId: !Ref Subnet
        DeviceIndex: 0
        GroupSet:
        - !Ref SecurityGroup
      Tags:
      - Key: Name
        Value: 'AWS EC2 SSH access with IAM showcase'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
Outputs:
  PublicName:
    Description: 'The public name of the EC2 instance.'
    Value: !GetAtt 'Instance.PublicDnsName'
